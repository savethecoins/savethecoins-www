// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function(grunt) {
    var config;
    require("load-grunt-tasks")(grunt);
    require("time-grunt")(grunt);
    config = require('./config/config')();
    grunt.initConfig({
      clean: {
        dev: [".tmp", ".sass-cache"]
      },
      coffee: {
        dev: {
          files: {
            ".tmp/scripts/app.js": "" + config.client + "/scripts/app/{,*/}*.coffee"
          }
        },
        prod: {
          files: [
            {
              src: "" + config.client + "/scripts/app/{,*/}*.coffee",
              dest: "" + config.build + "/scripts/app.js"
            }
          ]
        }
      },
      jade: {
        dev: {
          options: {
            pretty: true,
            data: config
          },
          files: [
            {
              expand: true,
              cwd: "" + config.client,
              src: "{,*/}*.jade",
              dest: ".tmp",
              ext: ".html"
            }
          ]
        },
        stage: {
          options: {
            pretty: true,
            data: function() {
              return require('./config/config')('staging');
            }
          },
          files: [
            {
              expand: true,
              cwd: "" + config.client,
              src: "{,*/}*.jade",
              dest: "" + config.build,
              ext: ".html"
            }
          ]
        },
        prod: {
          options: {
            pretty: true,
            data: function() {
              return require('./config/config')('production');
            }
          },
          files: [
            {
              expand: true,
              cwd: "" + config.client,
              src: "{,*/}*.jade",
              dest: "" + config.build,
              ext: ".html"
            }
          ]
        }
      },
      compass: {
        options: {
          sassDir: "" + config.client + "/styles",
          imagesDir: "" + config.client + "/img",
          javascriptsDir: "" + config.client + "/scripts",
          fontsDir: "" + config.client + "/fonts",
          importPath: "" + config.client + "/bower_components",
          httpImagesPath: "/img",
          httpGeneratedImagesPath: "/img/generated",
          httpFontsPath: "/fonts",
          relativeAssets: true
        },
        dev: {
          options: {
            cssDir: ".tmp/styles",
            generatedImagesDir: ".tmp/img/generated",
            debugInfo: true
          }
        },
        prod: {
          options: {
            cssDir: "" + config.build + "/styles",
            generatedImagesDir: "" + config.build + "/img/generated",
            outputStyle: "compressed"
          }
        }
      },
      less: {
        dev: {
          files: {
            ".tmp/styles/bootstrap.css": "" + config.client + "/styles/bootstrap/bootstrap.less"
          }
        },
        prod: {
          options: {
            compress: true
          },
          files: [
            {
              src: "" + config.client + "/styles/bootstrap/bootstrap.less",
              dest: "" + config.build + "/styles/bootstrap.css"
            }
          ]
        }
      },
      copy: {
        dev: {
          files: [
            {
              expand: true,
              cwd: "" + config.client + "/scripts/vendor",
              src: "{,*/}*.js",
              dest: ".tmp/scripts/vendor"
            }, {
              expand: true,
              cwd: "" + config.client + "/fonts",
              src: "*",
              dest: ".tmp/fonts"
            }
          ]
        },
        prod: {
          files: [
            {
              expand: true,
              dot: true,
              cwd: "" + config.client,
              dest: "" + config.build,
              src: ["*.{ico,png,txt}", ".htaccess", "bower_components/**/*", "img/{,*/}*", "fonts/*"]
            }, {
              expand: true,
              cwd: "" + config.client + "/scripts/vendor",
              src: "{,*/}*.js",
              dest: "" + config.build + "/scripts/vendor"
            }
          ]
        }
      },
      concurrent: {
        dev: ["coffee:dev", "jade:dev", "compass:dev", "less:dev", "copy:dev"],
        stage: ["coffee:prod", "jade:stage", "compass:prod", "less:prod", "copy:prod"],
        prod: ["coffee:prod", "jade:prod", "compass:prod", "less:prod", "copy:prod"]
      },
      ngmin: {
        prod: {
          files: [
            {
              src: "" + config.build + "/scripts/app.js",
              dest: "" + config.build + "/scripts/app.js"
            }
          ]
        }
      },
      uglify: {
        prod: {
          files: [
            {
              src: "" + config.build + "/scripts/app.js",
              dest: "" + config.build + "/scripts/app.js"
            }
          ]
        }
      },
      cdnify: {
        prod: {
          html: ["" + config.build + "/*.html"]
        }
      },
      express: {
        options: {
          cmd: "node_modules/coffee-script/bin/coffee",
          port: config.port
        },
        dev: {
          options: {
            script: "server.coffee"
          }
        },
        stage: {
          options: {
            script: "server.coffee",
            node_env: "staging"
          }
        },
        prod: {
          options: {
            script: "server.coffee",
            node_env: "production"
          }
        }
      },
      open: {
        dev: {
          url: "http://localhost:" + config.port
        }
      },
      watch: {
        express: {
          files: ["server.coffee", "server/{,*//*}*.{js,json,coffee}", "config/{,*//*}*.{js,json,coffee}"],
          tasks: ["express:dev"],
          options: {
            livereload: config.livereload,
            nospawn: true
          }
        },
        jade: {
          files: ["" + config.client + "/{,*/}*.jade", "config/config.coffee"],
          tasks: ["jade:dev"]
        },
        compass: {
          files: ["" + config.client + "/styles/{,*/}*.{scss,sass}"],
          tasks: ["compass:dev"]
        },
        less: {
          files: ["" + config.client + "/styles/{,*/}*.less"],
          tasks: ["less:dev"]
        },
        coffee: {
          files: ["" + config.client + "/scripts/app/{,*/}*.coffee"],
          tasks: ["coffee:dev"]
        },
        others: {
          files: ["" + config.client + "/scripts/vendor/{,*/}*.js"],
          tasks: ["copy:dev"]
        },
        livereloadStyles: {
          options: {
            livereload: config.livereload
          },
          files: [".tmp/**/*"]
        }
      }
    });
    grunt.registerTask("express-keepalive", "Keep grunt running", function() {
      return this.async();
    });
    grunt.registerTask("dev", function(target) {
      var tasks;
      tasks = ["clean", "concurrent:dev", "express:dev"];
      if (target === 'open') {
        tasks.push("open");
      }
      tasks.push("watch");
      return grunt.task.run(tasks);
    });
    grunt.registerTask("default", ["dev:open"]);
    grunt.registerTask("build", function(target) {
      var tasks;
      tasks = ["clean", "concurrent:" + target, "ngmin", "uglify", "cdnify"];
      return grunt.task.run(tasks);
    });
    grunt.registerTask("stage", ["build:stage", "express:stage", "open", "express-keepalive"]);
    return grunt.registerTask("prod", ["build:prod", "express:prod", "open", "express-keepalive"]);
  };

}).call(this);
